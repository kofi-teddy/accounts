Objectives -

    1. Complete CRUD system for purchase ledger
    2. Create the nominal ledger
    3. Modify the CRUD system so that nominal entries can be created

    Answer your own question about errors at top of the form.  See - https://stackoverflow.com/questions/58531111/bootstrap-4-multifield-equivalent?noredirect=1#comment110881808_58531111

PRIORITY 1

    To do -

        What about matching a value of 0 ?  I don't think this has been tested.  We need to
        test the limits of 0 and the due amount (which probably has been tested already).  For
        create a value of 0 would mean do not create the match record and for edit it would
        mean delete any existing match record.

        Continue with manual testing of incorrect usages.  Next to do is -

        # INCORRECT USAGE
        def test_header_total_is_non_zero_and_with_matching_transactions_above_the_total_NEGATIVE(self):

        We need to make a decision about where to show the outstanding amount.  I think
        I favour below the subtotal, vat and total amounts.  Also need to consider updating
        this on the fly whilst the user edits, and, creates the transaction in the first place.

    UI

        When the supplier errors the error div is too wide.  Like the grid we need to
        set a width constraint of these header fields so the design is respected.

        Input Dropdown Widget Dropdown button does not show in Firefox .... Arghghghgh

            I WILL DO THIS WHEN I HAVE PUT THE APP UP ON HEROKU 

    Create on the fly

        The supplier form prefix, 'supplier', is hard coded into the javascript.  This should be programmatically
        controlled instead.

    Tests

        Tests should be moved to the accountancy app.  This will mean creating special models just for tests - will
        need to read into the best way of doing this.  And when we come to say, include discount, we shouldn't
        change all our tests.  Instead we just create a new mock model for a new set of tests to test discount.

            THIS WOULD MEAN ALSO COPYING ALL THE VIEWS AND URLS.  EASIER TO JUST KEEP THE PURCHASES APP BUT RENAME
            TO "DUMMY_PURCHASES" OR SOMETHING

        Form testing - test we get the errors first for wrong doing.  Lesser of a priority is
        testing the forms work as this has been checked in views already.

        Test that credit note entered as positive is negative.  Same for refund etc.  Do for Edit and Create.
        Just one test for each.  But this shouldn't be a problem.

    Transaction Enquiry -

        The search function ignores "A", "the" etc so my supplier called "A" is ignored.  I think the solution
        is to use Trigram search but the question is how do i do this over multiple fields?  I think this is possible
        but cannot find an example.  The Q object is rumoured to be the answer but i couldn't get it to work.  A question
        therefore for SO probably.

            This is a start -

            >>> from django.contrib.postgres.search import TrigramSimilarity
            >>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
            >>> trig_vector = (TrigramSimilarity('supplier__name', text) + TrigramSimilarity('ref', text))
            >>> vector = SearchVector('total')
            >>> query = SearchQuery('120.00')
            >>> PurchaseHeader.objects.annotate(rank=SearchRank(vector, query), similarity=trig_vector).filter(Q(rank__gte=0) | Q(similarity__gt=0.3))

        The select2 widget probably should be replaced with selectize which is what we are using in create / edit views.

    ERRORS -

        I created a payment for 120.00 and on editing tried to match 150.00 of the same invoice it was already matched to.
        The error was about the lines not equalling the total.  This didn't make sense because it was a payment.
        This is probably easiest to address through a combination of checking the error message is in the HTML and
        manual UI testing.

        If field errors occur in the grid they are marked by a red tip in the bottom right of the cell.  This isn't
        exactly obvious so we reallly need a banner at the top which tells the user of the field errors.  Even better
        would be a simple widget which when clicked focuses on the error.  Imagine a grid with hundreds of rows.
        Without this widget it would be very boring looking for the error.

    View -

        Show errors if void fails.

        We need to show how much is outstanding.

    Edit -

        If an invoice is changed to a payment should we bother deleting the lines?  I suppose it should
        and we should also warn the user about this.

    Create -

        Implement the "add" or "add and add another" logic.  Former should redirect to read afterwards - perhaps check Xero.
        The other should obviously redirect to create view again.

        The redirection to transaction enquiry at the moment does not show the "Transaction successfully posted" message.
        Only when the user goes back to the create view does it show...

        Check that a transaction cannot be matched to itself.  At form level as well as UI.  UI shouldn't be a problem now
        as i have fixed the bug in the outstanding transactions query.

        The fields for the match form should have the disabled attribute set really.  Except for those we are setting.
        Need to look into this.  At the moment i just set readonly as an attribute on the widget which i don't think
        is the same.

    Templates -

        FIX ME - change 'matching_formset" to "match_formset" in the template

    MISC -

        Many times i am checking whether the transaction type is a payment or not.  Need a global helper to do this
        instead of repeating the code all over the place.