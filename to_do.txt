Objectives -

    Good resource - https://hakibenita.com/django-group-by-sql#how-to-group-by-multiple-fields

    NEED TO RE-PRIORITSE MY WORK LOAD BELOW IN ORDER OF PRIORITY.

    Work through the sections below before creating the cash book and sales ledger.  Even then i need to look through
    all the code and do a rewrite before creating the new ledgers.  And when i do create the cash book i need
    to create new tests.  I had thought this was just the NL logic again but it is not.  We need to analyse only
    one side of the double entry for cash book whereas for NL you analyse both sides.

    Answer your own question about errors at top of the form.  See - https://stackoverflow.com/questions/58531111/bootstrap-4-multifield-equivalent?noredirect=1#comment110881808_58531111

    DJANGO ENHANCEMENT LOG - I was surprised that we could not use proxy models based on a parent class instance.

    VAT

        Nominal journal header needs a output or input flag for the vat analysis

    SALES

        I need to refactor all the code for PL create_nom_trans etc

        We can get the polymorphism i want; it just doesn't involve djang

        class Invoice:
            def __init__(self, header):
                self.header_obj = header
                # all DJANGO ORM is just done via this attribute

        Create a bad debt write off journal transaction type for the sales ledger

    Nominal

        If many lines are analysed to the same to the same nominal it makes sense to group.
        But if the transactions total zero it is misleading.  I realised this when i thought
        a nominal journal with vat analysed was not updating the vat control account correctly
        but in fact i had analysed the same amount on the debit and credit side so it totalled
        zero. If this is possible in sql it isn't going to be through the ORM.

        This shouldn't be an issue though in practice because you wouldn't do something like this.
        
            LEAVE IT AS IT IS.

    UI

        Input Dropdown Widget Dropdown button does not show in Firefox .... Arghghghgh

            I WILL DO THIS WHEN I HAVE PUT THE APP UP ON HEROKU

        Should we show a client side error if the matching is wrong?  Even prevent form submission?

        	LEAVE THIS FOR NOW AS CLIENT SIDE VALIDATION HAS BEEN IGNORED SO FAR.  NEEDS TO BE CONSIDERED
        	AS PART OF THAT MORE GENERAL TOPIC.

    Create on the fly

        The supplier form prefix, 'supplier', is hard coded into the javascript.  This should be programmatically
        controlled instead.

            POSTPONE FIXING THIS UNTIL WE BEGIN CREATING THE SALES LEDGER

    Tests

        Create a test which checks a cash book not being POSTED for a payment and a b/f payment.  This isn't tested
        at the moment.  This should just be a form test.

        Check that a transaction cannot be matched to itself.  At form level as well as UI.  UI shouldn't be a problem now
        as i have fixed the bug in the outstanding transactions query.

        If we set an ordering on the transaction header models we will need to add a order_by to our ORM queries
        in the tests.  And probably for all of them ... what joy !

        All the trans types for PL have been checked for trans creation.  I haven't done this though for
        edit.  At a bare minimum i need to test negative inputs and editing transactions where the
        transaction being edited is matched to another transaction where the matched_by is the other
        transaction.  A lesser priority would be repeating the same sort of matching tests done for CREATE.
        Besides i've tested this already for invoice and payments in the non nominal transaction testing.
        I would be very surprised if any bugs were discovered during this any of testing.  Especially,
        the lower priority testing.

            GIVEN THIS IS SO TIME CONSUMING AND I DOUBT THERE ANY BUGS THIS IS A LOW PRIORITY FOR NOW.

        Tests should be moved to the accountancy app.  This will mean creating special models just for tests - will
        need to read into the best way of doing this.  And when we come to say, include discount, we shouldn't
        change all our tests.  Instead we just create a new mock model for a new set of tests to test discount.

            THIS WOULD MEAN ALSO COPYING ALL THE VIEWS AND URLS.  EASIER TO JUST KEEP THE PURCHASES APP BUT RENAME
            TO "DUMMY_PURCHASES" OR SOMETHING

    Create -

        The fields for the match form should have the disabled attribute set really.  Except for those we are setting.
        Need to look into this.  At the moment i just set readonly as an attribute on the widget which i don't think
        is the same.

        The part where we assign nominal transactions to line in the lines_are_valid is crazily inefficient.
        I need to sort the lines and nominal transactions and put them into a dictionary to improve performance.

        BaseTransaction has the matching_is_valid method for BaseCreateTransaction.  Should move to this latter
        class.  Need to check other methods to see whether should be moved also.

    Templates -

        FIX ME - change 'matching_formset" to "match_formset" in the template

    ACCOUNTANCY PACKAGE

        Base Views.  I need to refactor so that we will have one view for headers with lines
        and another for without lines.  At the moment BaseTransaction does everything but
        this compromises the code quality.  It all feels a bit clumsy left as it is.

        jQueryDataTables class should be renamed to contain "Mixin" because this is what is is.

        AJAX FORM

            We use a lambda function for getting the queryset for the instance.  This is silly.
            We know the model and the instance so the AjaxForm ought to get do -

                self.get_model().objects.get(pk=self.instance.pk)

                Or can we not just set the queryset to instance.

            Also there is no need to set the querysets in the AjaxModelChoiceField.  Just define
            them yourself so the consumer of this field doesn't have to bother specifying them.

            Even better set the queryset within the Field class if possible.  Not sure this is
            though because self.instance for example is outside the class.


    ENHANCEMENTS -  

        Provide link from match record to the transaction header.  Ideally this would open up in a different tab in the
        browser.