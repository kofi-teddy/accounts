Objectives -

    1. CreateCreditNote and EditCreditNote tests.  I am sure we do not flip the sign for the lines which is a major bug.
    2. Edit Payment, Edit Brought Forward
    3. What about changing the type?  It might be easiest to just delete the existing nominal transactions and after updating the lines
       create the new nom trans from scratch.

    4. Create Cash Book
    5. Create the Sales ledger

    Answer your own question about errors at top of the form.  See - https://stackoverflow.com/questions/58531111/bootstrap-4-multifield-equivalent?noredirect=1#comment110881808_58531111


PRIORITY 1

        What about brought forwards?  Payments will need nominal transactions
        but brought forwards will not.

        If the vat analysis is removed the nominal transaction needs deleting.
        More generally nominal transactions which have zero values should be deleted.

        We need to make a decision about where to show the outstanding amount.  I think
        I favour below the subtotal, vat and total amounts.  Also need to consider updating
        this on the fly whilst the user edits, and, creates the transaction in the first place.

    LINES - ANALYSIS

        Nominal transactions with zero values should not be permitted

    VAT

        The system should let you enter a VAT only invoice.  I.e. goods = 0 and vat = total

        Brought forward transactions cannot select a vat code so vat cannot be analysed.  Instead
        vat analsis must be enabled for nominal journals.  At the moment vat nominal entries
        are created.  Later on we need to let the user choose whether this vat should be input
        or output on the vat return.

    SALES

        Create a bad debt write off journal transaction type for the sales ledger

    UI

        When the supplier errors the error div is too wide.  Like the grid we need to
        set a width constraint of these header fields so the design is respected.

        Input Dropdown Widget Dropdown button does not show in Firefox .... Arghghghgh

            I WILL DO THIS WHEN I HAVE PUT THE APP UP ON HEROKU 

    Create on the fly

        The supplier form prefix, 'supplier', is hard coded into the javascript.  This should be programmatically
        controlled instead.

    Tests

        Tests should be moved to the accountancy app.  This will mean creating special models just for tests - will
        need to read into the best way of doing this.  And when we come to say, include discount, we shouldn't
        change all our tests.  Instead we just create a new mock model for a new set of tests to test discount.

            THIS WOULD MEAN ALSO COPYING ALL THE VIEWS AND URLS.  EASIER TO JUST KEEP THE PURCHASES APP BUT RENAME
            TO "DUMMY_PURCHASES" OR SOMETHING

        Form testing - test we get the errors first for wrong doing.  Lesser of a priority is
        testing the forms work as this has been checked in views already.

        Test that credit note entered as positive is negative.  Same for refund etc.  Do for Edit and Create.
        Just one test for each.  But this shouldn't be a problem.

    Transaction Enquiry -

        The search function ignores "A", "the" etc so my supplier called "A" is ignored.  I think the solution
        is to use Trigram search but the question is how do i do this over multiple fields?  I think this is possible
        but cannot find an example.  The Q object is rumoured to be the answer but i couldn't get it to work.  A question
        therefore for SO probably.

            This is a start -

            >>> from django.contrib.postgres.search import TrigramSimilarity
            >>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
            >>> trig_vector = (TrigramSimilarity('supplier__name', text) + TrigramSimilarity('ref', text))
            >>> vector = SearchVector('total')
            >>> query = SearchQuery('120.00')
            >>> PurchaseHeader.objects.annotate(rank=SearchRank(vector, query), similarity=trig_vector).filter(Q(rank__gte=0) | Q(similarity__gt=0.3))

        The select2 widget probably should be replaced with selectize which is what we are using in create / edit views.

    ERRORS -

        We call match_formset.is_valid() even though the header may have failed.  This will cause errors because the
        clean method of the match formset presupposes a match_by attribute.  I need to create a test which covers
        this possibility and of course fix the problem.

        I created a payment for 120.00 and on editing tried to match 150.00 of the same invoice it was already matched to.
        The error was about the lines not equalling the total.  This didn't make sense because it was a payment.
        This is probably easiest to address through a combination of checking the error message is in the HTML and
        manual UI testing.

            CANNOT REPLICATE THIS

        If field errors occur in the grid they are marked by a red tip in the bottom right of the cell.  This isn't
        exactly obvious so we really need a banner at the top which tells the user of the field errors.  Even better
        would be a simple widget which when clicked focuses on the error.  Imagine a grid with hundreds of rows.
        Without this widget it would be very boring looking for the error.

    View -

        Show errors if void fails.

        We need to show how much is outstanding.

    Edit -

        The calculator does not exclude the lines which have been marked as deleted.

        We also need to add a test which checks that new lines marked as deleted do not show.  I think
        the better thing to do actually would be to delete new lines on the client and only set the
        DELETE flag on those which have primary keys.

        If an invoice is changed to a payment should we bother deleting the lines?  I suppose it should
        and we should also warn the user about this.

    Create -

        The part where we assign nominal transactions to line in the lines_are_valid is crazily inefficient.
        I need to sort the lines and nominal transactions and put them into a dictionary to improve performance.

        BaseTransaction has the matching_is_valid method for BaseCreateTransaction.  Should moved to this latter
        class.  Need to check other methods to see whether should be moved also.

        The redirection to transaction enquiry at the moment does not show the "Transaction successfully posted" message.
        Only when the user goes back to the create view does it show...

        Check that a transaction cannot be matched to itself.  At form level as well as UI.  UI shouldn't be a problem now
        as i have fixed the bug in the outstanding transactions query.

        The fields for the match form should have the disabled attribute set really.  Except for those we are setting.
        Need to look into this.  At the moment i just set readonly as an attribute on the widget which i don't think
        is the same.

    Templates -

        FIX ME - change 'matching_formset" to "match_formset" in the template

    MISC -

        Many times i am checking whether the transaction type is a payment or not.  Need a global helper to do this
        instead of repeating the code all over the place.

    ENHANCEMENTS -  

        Provide link from match record to the transaction header.  Ideally this would open up in a different tab in the
        browser.