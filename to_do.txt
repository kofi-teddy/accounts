PRIORITY 1

    All tests should use sort_multiple to make sure they are in pk ascending order

    Line ordering.  I think we just need to make sure the lines are ordered by line no at the model level.
    This way they show correctly in the edit view.... Need to test this.

    Edit -
    
        Test EditInvoice.  Repeat tests so that we test adding a new matching line

        I've tested deleting lines in the edit view but have not yet done the work client side.
        For the create view, delete might as well literally remove the line i.e. dom element
        But for edit view it would be better to just highlight the line reddish in case the user accidentally deletes it;
        this way they can click the button again to undo the delete.

        Add table-bordered to the 'New Matching Transactions' table

        If an invoice is changed from should we bother deleting the lines?  I suppose it should
        and we should also warn the user about this.

    Create -

        Test that credit note entered as positive is negative.  Same for refund etc

        Test entering blank lines is ok

        Subtotal, vat, total needs to be set on the server - for errors and editing

        Add supplier does not work.  Need to create a pop up form on the fly

        Form testing - test we get the errors first for wrong doing.  Lesser of a priority is
        testing the forms work as this has been checked in views already.

    Fix the __len__ method of the model choice field override in accountancy.fields

    Enable Ordering for the Outstanding transactions table

    FIX ME - change 'matching_formset" to "match_formset" in the template

    save is called on the header_obj potentially twice in CreateTransactions.  I assume the second time
    will not hit the DB because Django first checks if the fields have changed.  But i need to confirm this.

    Many times i am checking whether the transaction type is a payment or not.  Need a global helper to do this
    instead of repeating the code all over the place.

PRIORITY 2

    Warn user if the vat value they override is not the goods * rate

    Refactor the styles in styles.css and ui_elem_styles.css.  Styles in the first sheet probably belong to the second.
    The second sheet could do with being renamed



Python

    @classonlymethod decorator