Objectives -

    Good resource - https://hakibenita.com/django-group-by-sql#how-to-group-by-multiple-fields

    Work through the sections below before creating the cash book and sales ledger.

    Answer your own question about errors at top of the form.  See - https://stackoverflow.com/questions/58531111/bootstrap-4-multifield-equivalent?noredirect=1#comment110881808_58531111

    DJANGO ENHANCEMENT LOG - I was surprised that we could not use proxy models based on a parent class instance.

    VAT

        Nominal journal header needs a output or input flag for the vat analysis

    SALES

        I need to refactor all the code for PL create_nom_trans etc

        We can get the polymorphism i want; it just doesn't involve djang

        class Invoice:
            def __init__(self, header):
                self.header_obj = header
                # all DJANGO ORM is just done via this attribute


        Create a bad debt write off journal transaction type for the sales ledger

    Nominal

        If many lines are analysed to the same to the same nominal it makes sense to group.
        But if the transactions total zero it is misleading.  I realised this when i thought
        a nominal journal with vat analysed was not updating the vat control account correctly
        but in fact i had analysed the same amount on the debit and credit side so it totalled
        zero. If this is possible in sql it isn't going to be through the ORM.

        This shouldn't be an issue though in practice because you wouldn't do something like this.
        
            LEAVE IT AS IT IS.

    UI

        Input Dropdown Widget Dropdown button does not show in Firefox .... Arghghghgh

            I WILL DO THIS WHEN I HAVE PUT THE APP UP ON HEROKU

        Should we show a client side error if the matching is wrong?  Even prevent form submission?

        	LEAVE THIS FOR NOW AS CLIENT SIDE VALIDATION HAS BEEN IGNORED SO FAR.  NEEDS TO BE CONSIDERED
        	AS PART OF THAT MORE GENERAL TOPIC.

    Create on the fly

        The supplier form prefix, 'supplier', is hard coded into the javascript.  This should be programmatically
        controlled instead.

            POSTPONE FIXING THIS UNTIL WE BEGIN CREATING THE SALES LEDGER

    Tests

        Remove cash book field from B/F payment tests

        If we set an ordering on the transaction header models we will need to add a order_by to our ORM queries
        in the tests.  And probably for all of them ... what joy !

        We call match_formset.is_valid() even though the header may have failed.  This will cause errors because the
        clean method of the match formset presupposes a match_by attribute.  I need to create a test which covers
        this possibility and of course fix the problem.

        Create a negative input for a credit note.  We need to some basic tests for credit note and refund in general actually.
        I don't envisage discovering a problem but we need some checks even if not quite as thorough as the others.  In fact
        i over tested on invoice and payment so without these unnecessary tests i may be able to test just as well.  Really
        just a copy and paste exercise and then swapping signs.

        Test entering a zero value invoice / credit note.  Check nominal entries for editing from zero to non zero and vice versa.
        
            PRETTY SURE THIS HAS BEEN DONE

        Tests should be moved to the accountancy app.  This will mean creating special models just for tests - will
        need to read into the best way of doing this.  And when we come to say, include discount, we shouldn't
        change all our tests.  Instead we just create a new mock model for a new set of tests to test discount.

            THIS WOULD MEAN ALSO COPYING ALL THE VIEWS AND URLS.  EASIER TO JUST KEEP THE PURCHASES APP BUT RENAME
            TO "DUMMY_PURCHASES" OR SOMETHING

    Transaction Enquiry -

        The search function ignores "A", "the" etc so my supplier called "A" is ignored.  I think the solution
        is to use Trigram search but the question is how do i do this over multiple fields?  I think this is possible
        but cannot find an example.  The Q object is rumoured to be the answer but i couldn't get it to work.  A question
        therefore for SO probably.

            This is a start -

            >>> from django.contrib.postgres.search import TrigramSimilarity
            >>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
            >>> trig_vector = (TrigramSimilarity('supplier__name', text) + TrigramSimilarity('ref', text))
            >>> vector = SearchVector('total')
            >>> query = SearchQuery('120.00')
            >>> PurchaseHeader.objects.annotate(rank=SearchRank(vector, query), similarity=trig_vector).filter(Q(rank__gte=0) | Q(similarity__gt=0.3))

        The select2 widget probably should be replaced with selectize which is what we are using in create / edit views.

    ERRORS -

        If field errors occur in the grid they are marked by a red tip in the bottom right of the cell.  This isn't
        exactly obvious so we really need a banner at the top which tells the user of the field errors.  Even better
        would be a simple widget which when clicked focuses on the error.  Imagine a grid with hundreds of rows.
        Without this widget it would be very boring looking for the error.

    View -

        Show errors if void fails.

        We need to show how much is outstanding.

    Edit -

        The calculator does not exclude the lines which have been marked as deleted.

        We also need to add a test which checks that new lines marked as deleted do not show.  I think
        the better thing to do actually would be to delete new lines on the client and only set the
        DELETE flag on those which have primary keys.

    Create -

        The part where we assign nominal transactions to line in the lines_are_valid is crazily inefficient.
        I need to sort the lines and nominal transactions and put them into a dictionary to improve performance.

        BaseTransaction has the matching_is_valid method for BaseCreateTransaction.  Should moved to this latter
        class.  Need to check other methods to see whether should be moved also.

        The redirection to transaction enquiry at the moment does not show the "Transaction successfully posted" message.
        Only when the user goes back to the create view does it show...

        Check that a transaction cannot be matched to itself.  At form level as well as UI.  UI shouldn't be a problem now
        as i have fixed the bug in the outstanding transactions query.

        The fields for the match form should have the disabled attribute set really.  Except for those we are setting.
        Need to look into this.  At the moment i just set readonly as an attribute on the widget which i don't think
        is the same.

    Templates -

        FIX ME - change 'matching_formset" to "match_formset" in the template


    ACCOUNTANCY PACKAGE

        jQueryDataTables class should be renamed to contain "Mixin" because this is what is is.

        AJAX FORM

            We use a lambda function for getting the queryset for the instance.  This is silly.
            We know the model and the instance so the AjaxForm ought to get do -

                self.get_model().objects.get(pk=self.instance.pk)

                Or can we not just set the queryset to instance.

            Also there is no need to set the querysets in the AjaxModelChoiceField.  Just define
            them yourself so the consumer of this field doesn't have to bother specifying them.

            Even better set the queryset within the Field class if possible.  Not sure this is
            though because self.instance for example is outside the class.


    ENHANCEMENTS -  

        Provide link from match record to the transaction header.  Ideally this would open up in a different tab in the
        browser.