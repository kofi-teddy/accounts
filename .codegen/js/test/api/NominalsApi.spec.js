/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SnippetsApi);
  }
}(this, function(expect, SnippetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SnippetsApi.NominalsApi();
  });

  describe('(package)', function() {
    describe('NominalsApi', function() {
      describe('nominalsCreate', function() {
        it('should call nominalsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsCreate call and complete the assertions
          /*
          var format = "format_example";
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsCreate(format, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsList', function() {
        it('should call nominalsList successfully', function(done) {
          // TODO: uncomment nominalsList call
          /*

          instance.nominalsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalListCreate', function() {
        it('should call nominalsNominalListCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalListCreate call and complete the assertions
          /*
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsNominalListCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalListList', function() {
        it('should call nominalsNominalListList successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalListList call and complete the assertions
          /*
          var opts = {};
          opts.page = 56;

          instance.nominalsNominalListList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.InlineResponse200);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.Nominal);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsDelete', function() {
        it('should call nominalsNominalsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsDelete call
          /*
          var id = 56;

          instance.nominalsNominalsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsDelete_0', function() {
        it('should call nominalsNominalsDelete_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsDelete_0 call
          /*
          var format = "format_example";
          var id = 56;

          instance.nominalsNominalsDelete_0(format, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsPartialUpdate', function() {
        it('should call nominalsNominalsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsPartialUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsNominalsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsPartialUpdate_0', function() {
        it('should call nominalsNominalsPartialUpdate_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsPartialUpdate_0 call and complete the assertions
          /*
          var format = "format_example";
          var id = 56;
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsNominalsPartialUpdate_0(format, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsRead', function() {
        it('should call nominalsNominalsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsRead call and complete the assertions
          /*
          var id = 56;

          instance.nominalsNominalsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsRead_0', function() {
        it('should call nominalsNominalsRead_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsRead_0 call and complete the assertions
          /*
          var format = "format_example";
          var id = 56;

          instance.nominalsNominalsRead_0(format, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsUpdate', function() {
        it('should call nominalsNominalsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsNominalsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsNominalsUpdate_0', function() {
        it('should call nominalsNominalsUpdate_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsNominalsUpdate_0 call and complete the assertions
          /*
          var format = "format_example";
          var id = 56;
          var data = new SnippetsApi.Nominal();
          data.name = "";
          data.parent = "";

          instance.nominalsNominalsUpdate_0(format, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Nominal);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsRead', function() {
        it('should call nominalsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsRead call and complete the assertions
          /*
          var format = "format_example";
          var opts = {};
          opts.page = 56;

          instance.nominalsRead(format, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.InlineResponse200);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.Nominal);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('nominalsRead_0', function() {
        it('should call nominalsRead_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for nominalsRead_0 call
          /*
          var format = "format_example";

          instance.nominalsRead_0(format, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
